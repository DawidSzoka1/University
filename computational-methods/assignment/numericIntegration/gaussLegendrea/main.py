import math

gauss_legendre_data = {
    2: {
        "ti": [-0.5773502692, 0.5773502692],
        "wi": [1.0, 1.0]
    },
    4: {
        "ti": [-0.8611363116, -0.3399810436, 0.3399810436, 0.8611363116],
        "wi": [0.3478548451, 0.6521451549, 0.6521451549, 0.3478548451]
    },
    6: {
        "ti": [-0.9324695142, -0.6612093865, -0.2386191861,
               0.2386191861, 0.6612093865, 0.9324695142],
        "wi": [0.1713244924, 0.3607615730, 0.4679139346,
               0.4679139346, 0.3607615730, 0.1713244924]
    },
    8: {
        "ti": [-0.9602898565, -0.7966664774, -0.5255324099, -0.1834346425,
               0.1834346425, 0.5255324099, 0.7966664774, 0.9602898565],
        "wi": [0.1012285363, 0.2223810345, 0.3137066459, 0.3626837834,
               0.3626837834, 0.3137066459, 0.2223810345, 0.1012285363]
    },
    10: {
        "ti": [-0.9739065285, -0.8650633666, -0.6794095682, -0.4333953941, -0.1488743389,
               0.1488743389, 0.4333953941, 0.6794095682, 0.8650633666, 0.9739065285],
        "wi": [0.0666713443, 0.1494513491, 0.2190863625, 0.2692667193, 0.2955242247,
               0.2955242247, 0.2692667193, 0.2190863625, 0.1494513491, 0.0666713443]
    },
    16: {
        "ti": [-0.9894009349, -0.9445750231, -0.8656312024, -0.7554044084,
               -0.6178762444, -0.4580167776, -0.2816035507, -0.0950125098,
               0.0950125098, 0.2816035507, 0.4580167776, 0.6178762444,
               0.7554044084, 0.8656312024, 0.9445750231, 0.9894009349],
        "wi": [0.0271524594, 0.0622535239, 0.0951585116, 0.1246289713,
               0.1495959888, 0.1691565194, 0.1826034150, 0.1894506104,
               0.1894506104, 0.1826034150, 0.1691565194, 0.1495959888,
               0.1246289713, 0.0951585116, 0.0622535239, 0.0271524594]
    }
}


def calculate_wi(i, n):
    row = gauss_legendre_data.get(n)
    if row is None:
        return 0
    return row.get('wi')[i]

def calculate_ti(i, n):
    row = gauss_legendre_data.get(n)
    if row is None:
        return 0
    return row.get('ti')[i]

def function(x):
    return (1.4 * x + 0.3)/(2.3 + math.cos(0.4*x**2 + 1))


def calculate_integral(a, b, n, func=function):
    mul = (b - a) / 2
    calculate = 0
    for i in range(1, n + 1):
        calculate += calculate_wi(i-1, n) * func(mul * calculate_ti(i-1, n) + (b + a) / 2)

    return calculate * mul


a = 0.4
b = 1.3
n = 16

print(f"przyblizona wartosc calki dla n = {n} wynosi {calculate_integral(a, b, n, function)}")